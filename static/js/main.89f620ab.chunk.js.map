{"version":3,"sources":["ThemeProvider.tsx","AppTheme.tsx","components/layout/Header.tsx","components/layout/Footer.tsx","clipboard.ts","components/layout/Content.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["hasLocalStorage","localStorage","ThemeContext","React","createContext","switchTheme","theme","ThemeProvider","_ref","children","_useState","useState","getItem","_useState2","Object","slicedToArray","setTheme","react_default","a","createElement","Provider","value","name","newTheme","setItem","AppTheme","useContext","core_styles","createMuiTheme","palette","type","typography","useNextVariants","index_es","withStyles","createStyles","AppBarWrapper","flexGrow","DarkModeControl","userSelect","Title","lineHeight","paddingLeft","classes","_useContext","inDarkMode","className","color","position","row","variant","control","checked","onChange","label","href","mdi_material_ui_index_es","Footer","props","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","align","Imprint","gutterBottom","concat","process","Component","marginTop","hasClipboardSupport","hasClipboardAPI","navigator","clipboard","isNotFirefox","userAgent","toLowerCase","includes","readFromClipboard","asyncToGenerator","regenerator_default","mark","_callee","nav","result","wrap","_context","prev","next","permissions","query","sent","state","abrupt","readText","stop","apply","arguments","copyToClipboard","_ref2","_callee2","text","_context2","writeText","_x","demoJson","JSON","stringify","age","formatJSON","json","object","json5","parse","sorted","jsonAbc","sortObj","error","JsonTextField","assign","fullWidth","multiline","rows","rowsMax","Infinity","style","margin","Button","spacing","unit","Pane","padding","input","setInput","_useState3","_useState4","output","setOutput","_useState5","_useState6","showPlaceholder","setShowPlaceholder","useEffect","container","item","xs","sm","component","Content_JsonTextField","target","onFocus","onBlur","placeholder","onClick","then","disabled","App","ThemeProvider_ThemeProvider","AppTheme_AppTheme","layout_Header","layout_Content","layout_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.89f620ab.chunk.js","sourcesContent":["import {PaletteType} from '@material-ui/core';\nimport React, {useState} from 'react';\n\ninterface Context {\n  switchTheme: () => void;\n  theme: PaletteType;\n}\n\nconst hasLocalStorage = () => typeof localStorage !== 'undefined';\n\nconst loadTheme = (): PaletteType => {\n  const theme = hasLocalStorage() && localStorage.getItem('theme');\n  return theme === 'dark' ? 'dark' : 'light';\n};\n\nconst saveTheme = (name: PaletteType) => {\n  if (hasLocalStorage()) {\n    localStorage.setItem('theme', name);\n  }\n};\n\nconst ThemeContext = React.createContext<Context>({switchTheme: () => {}, theme: 'light'});\n\nconst ThemeProvider = ({children}: React.Props<Context>) => {\n  const [theme, setTheme] = useState(loadTheme());\n\n  const switchTheme = () => {\n    const newTheme = theme === 'dark' ? 'light' : 'dark';\n    setTheme(newTheme);\n    saveTheme(newTheme);\n  };\n\n  return <ThemeContext.Provider value={{switchTheme, theme}}>{children}</ThemeContext.Provider>;\n};\n\nexport {ThemeContext, ThemeProvider};\n","import {CssBaseline, MuiThemeProvider, PaletteType, createMuiTheme} from '@material-ui/core';\nimport {MuiThemeProviderProps} from '@material-ui/core/styles/MuiThemeProvider';\nimport React, {useContext} from 'react';\nimport {ThemeContext} from './ThemeProvider';\n\nexport const AppTheme = ({children}: React.Props<MuiThemeProviderProps>) => {\n  const {theme} = useContext(ThemeContext);\n  return (\n    <MuiThemeProvider\n      theme={createMuiTheme({\n        palette: {\n          type: theme,\n        },\n        typography: {\n          useNextVariants: true,\n        },\n      })}\n    >\n      <CssBaseline />\n      {children}\n    </MuiThemeProvider>\n  );\n};\n\nexport default AppTheme;\n","import {\n  AppBar,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  IconButton,\n  Switch,\n  Typography,\n  WithStyles,\n  createStyles,\n  withStyles,\n} from '@material-ui/core';\nimport {GithubCircle} from 'mdi-material-ui';\nimport React, {useContext} from 'react';\nimport {ThemeContext} from '../../ThemeProvider';\n\nconst styles = () =>\n  createStyles({\n    AppBarWrapper: {\n      flexGrow: 1,\n    },\n    DarkModeControl: {\n      userSelect: 'none',\n    },\n    Title: {\n      flexGrow: 1,\n      lineHeight: '48px',\n      paddingLeft: '20px',\n    },\n  });\n\ninterface Props extends WithStyles<typeof styles> {}\n\nconst Header = ({classes}: Props) => {\n  const {theme, switchTheme} = useContext(ThemeContext);\n  const inDarkMode = theme === 'dark';\n\n  return (\n    <div className={classes.AppBarWrapper}>\n      <AppBar color=\"default\" position=\"static\">\n        <FormControl>\n          <FormGroup row>\n            <Typography className={classes.Title} color=\"inherit\" variant=\"h5\">\n              Sort JSON\n            </Typography>\n            <FormControlLabel\n              className={classes.DarkModeControl}\n              control={<Switch color=\"primary\" checked={inDarkMode} onChange={switchTheme} />}\n              label=\"Dark Mode\"\n            />\n            <IconButton color=\"inherit\" href=\"https://github.com/ffflorian/sortjson.com\">\n              <GithubCircle />\n            </IconButton>\n          </FormGroup>\n        </FormControl>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(Header);\n","import {Theme, Typography, WithStyles, createStyles, withStyles} from '@material-ui/core';\nimport React from 'react';\n\nconst version = process.env.REACT_APP_VERSION || '';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    Imprint: {\n      marginTop: '10px',\n      paddingLeft: '20px',\n    },\n  });\n\ninterface Props extends WithStyles<typeof styles> {}\n\ninterface State {}\n\nclass Footer extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    const {classes} = this.props;\n\n    return (\n      <Typography align=\"left\" className={classes.Imprint} gutterBottom={true}>\n        {`Version ${version}`}\n      </Typography>\n    );\n  }\n}\n\nexport default withStyles(styles)(Footer);\n","export const hasClipboardSupport = () => {\n  const hasClipboardAPI = typeof (navigator as any).clipboard !== 'undefined';\n  const isNotFirefox = !navigator.userAgent.toLowerCase().includes('firefox');\n  return hasClipboardAPI && isNotFirefox;\n};\n\nexport const readFromClipboard = async () => {\n  const nav = navigator as NavigatorPermissions.NavigatorPermissions;\n  if (nav.permissions) {\n    const result = await nav.permissions.query({name: 'clipboard-read'});\n    if (result.state === 'granted' || result.state === 'prompt') {\n      return (navigator as any).clipboard.readText();\n    }\n  }\n};\n\nexport const copyToClipboard = async (text: string) => {\n  const nav = navigator as NavigatorPermissions.NavigatorPermissions;\n  if (nav.permissions) {\n    const result = await nav.permissions.query({name: 'clipboard-write'});\n    if (result.state === 'granted' || result.state === 'prompt') {\n      (navigator as any).clipboard.writeText(text);\n      return true;\n    }\n  }\n  return false;\n};\n","import {\n  Button,\n  Grid,\n  Paper,\n  TextField,\n  Theme,\n  Typography,\n  WithStyles,\n  createStyles,\n  withStyles,\n} from '@material-ui/core';\nimport json5 from 'json5';\nimport React, {useEffect, useState} from 'react';\nimport {copyToClipboard, hasClipboardSupport, readFromClipboard} from '../../clipboard';\n\nimport {TextFieldProps} from '@material-ui/core/TextField';\nimport jsonAbc from 'jsonabc';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    Button: {\n      margin: theme.spacing.unit,\n    },\n    Pane: {\n      margin: '20px',\n      padding: theme.spacing.unit * 2,\n    },\n  });\n\nconst demoJson = JSON.stringify({name: 'Sophie', age: 50});\n\nconst formatJSON = (json: string) => {\n  try {\n    const object = json5.parse(json);\n    const sorted = jsonAbc.sortObj(object, true);\n    return JSON.stringify(sorted, null, 2);\n  } catch (error) {\n    return 'Input is not valid JSON.';\n  }\n};\n\nconst JsonTextField = (props: TextFieldProps) => (\n  <TextField {...props} fullWidth multiline rows={4} rowsMax={Infinity} style={{margin: 8}} variant=\"filled\" />\n);\n\nexport const Content = ({classes}: WithStyles<typeof styles>) => {\n  const [input, setInput] = useState('');\n  const [output, setOutput] = useState('');\n  const [showPlaceholder, setShowPlaceholder] = useState(true);\n\n  useEffect(() => setOutput(input ? formatJSON(input) : ''), [input]);\n\n  return (\n    <Grid container>\n      <Grid item xs={12} sm={6}>\n        <Paper className={classes.Pane}>\n          <Typography variant=\"h5\" component=\"h3\">\n            Input\n          </Typography>\n          <JsonTextField\n            onChange={({target: {value}}) => setInput(value)}\n            onFocus={() => setShowPlaceholder(false)}\n            onBlur={() => setShowPlaceholder(true)}\n            placeholder={showPlaceholder ? demoJson : ''}\n            value={input}\n          />\n          {hasClipboardSupport() && (\n            <Button\n              onClick={() => readFromClipboard().then(setInput)}\n              className={classes.Button}\n              color=\"inherit\"\n              variant=\"contained\"\n            >\n              Paste\n            </Button>\n          )}\n        </Paper>\n      </Grid>\n      <Grid item xs={12} sm={6}>\n        <Paper className={classes.Pane}>\n          <Typography variant=\"h5\" component=\"h3\">\n            Output\n          </Typography>\n          <JsonTextField disabled value={output} placeholder={showPlaceholder ? formatJSON(demoJson) : ''} />\n          {hasClipboardSupport() && (\n            <Button\n              onClick={() => copyToClipboard(output)}\n              className={classes.Button}\n              color=\"inherit\"\n              variant=\"contained\"\n            >\n              Copy\n            </Button>\n          )}\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default withStyles(styles)(Content);\n","import React from 'react';\nimport {AppTheme} from './AppTheme';\nimport {Content, Footer, Header} from './components/layout/';\nimport {ThemeProvider} from './ThemeProvider';\n\nconst App = () => (\n  <ThemeProvider>\n    <AppTheme>\n      <Header />\n      <Content />\n      <Footer />\n    </AppTheme>\n  </ThemeProvider>\n);\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as {env: {[key: string]: string}}).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}