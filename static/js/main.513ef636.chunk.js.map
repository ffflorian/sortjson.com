{"version":3,"sources":["AppTheme.tsx","AppProvider.tsx","components/layout/Header.tsx","components/layout/Footer.tsx","components/layout/Content.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppTheme","_this","this","react_default","a","createElement","AppContext","Consumer","context","core_styles","theme","createMuiTheme","palette","type","state","typography","useNextVariants","index_es","props","children","localStorage","getItem","name","setItem","React","Component","createContext","action","switchTheme","AppProvider","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getTheme","_this2","Provider","value","setState","setTheme","Header","inDarkMode","classes","className","AppBarWrapper","color","position","row","Title","variant","DarkModeControl","control","checked","onChange","label","href","mdi_material_ui_index_es","withStyles","createStyles","flexGrow","userSelect","lineHeight","paddingLeft","Footer","align","Imprint","gutterBottom","concat","process","marginTop","Content","formatJSON","object","JSON","parse","input","sorted","jsonAbc","sortObj","output","stringify","outputInfo","error","handleInput","event","currentTarget","copyToClipboard","_ref","asyncToGenerator","regenerator_default","mark","_callee","nav","result","wrap","_context","prev","next","navigator","permissions","query","sent","clipboard","writeText","stop","_x","apply","arguments","pasteFromClipboard","_ref2","_callee2","pasteText","_context2","readText","inputInfo","_x2","age","container","item","xs","sm","Pane","component","fullWidth","helperText","id","multiline","placeholder","rows","rowsMax","Infinity","style","margin","InputLabelProps","shrink","hasClipboardSupport","Button","onClick","disabled","hasClipboardAPI","isNotFirefox","userAgent","toLowerCase","indexOf","spacing","unit","padding","App","AppProvider_AppProvider","src_AppTheme","layout_Header","layout_Content","layout_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.513ef636.chunk.js","sourcesContent":["import {CssBaseline, MuiThemeProvider, PaletteType, createMuiTheme} from '@material-ui/core';\nimport React from 'react';\nimport {AppContext} from './AppProvider';\n\nclass AppTheme extends React.Component {\n  static getTheme(): PaletteType {\n    if (typeof localStorage !== 'undefined') {\n      const theme = localStorage.getItem('theme');\n      return theme === 'light' ? 'light' : 'dark';\n    } else {\n      return 'light';\n    }\n  }\n\n  static setTheme(name: PaletteType) {\n    if (typeof localStorage !== 'undefined') {\n      localStorage.setItem('theme', name);\n    }\n  }\n\n  render() {\n    return (\n      <AppContext.Consumer>\n        {context => (\n          <MuiThemeProvider\n            theme={createMuiTheme({\n              palette: {\n                type: context.state.theme,\n              },\n              typography: {\n                useNextVariants: true,\n              },\n            })}\n          >\n            <CssBaseline />\n            {this.props.children}\n          </MuiThemeProvider>\n        )}\n      </AppContext.Consumer>\n    );\n  }\n}\n\nexport default AppTheme;\n","import {PaletteType} from '@material-ui/core';\nimport React from 'react';\nimport AppTheme from './AppTheme';\n\ninterface Context {\n  action: {\n    switchTheme: (name: PaletteType) => void;\n  };\n  state: State;\n}\n\nconst AppContext = React.createContext<Context>({\n  action: {\n    switchTheme: (name: PaletteType) => {},\n  },\n  state: {\n    theme: 'light',\n  },\n});\n\ninterface Props {}\n\ninterface State {\n  theme: PaletteType;\n}\n\nclass AppProvider extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      theme: AppTheme.getTheme(),\n    };\n  }\n\n  render() {\n    return (\n      <AppContext.Provider\n        value={{\n          action: {\n            switchTheme: (name: PaletteType) =>\n              this.setState(\n                {\n                  theme: name,\n                },\n                () => {\n                  AppTheme.setTheme(this.state.theme);\n                }\n              ),\n          },\n          state: this.state,\n        }}\n      >\n        {this.props.children}\n      </AppContext.Provider>\n    );\n  }\n}\n\nexport {AppContext, AppProvider};\n","import {\n  AppBar,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  IconButton,\n  Switch,\n  Theme,\n  Typography,\n  WithStyles,\n  createStyles,\n  withStyles,\n} from '@material-ui/core';\nimport {GithubCircle} from 'mdi-material-ui';\nimport React from 'react';\nimport {AppContext} from '../../AppProvider';\nimport AppTheme from '../../AppTheme';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    AppBarWrapper: {\n      flexGrow: 1,\n    },\n    DarkModeControl: {\n      userSelect: 'none',\n    },\n    Title: {\n      flexGrow: 1,\n      lineHeight: '48px',\n      paddingLeft: '20px',\n    },\n  });\n\ninterface Props extends WithStyles<typeof styles> {}\n\ninterface State {\n  inDarkMode: boolean;\n}\n\nclass Header extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      inDarkMode: AppTheme.getTheme() === 'dark',\n    };\n  }\n\n  render() {\n    const {classes} = this.props;\n\n    return (\n      <AppContext.Consumer>\n        {context => (\n          <div className={classes.AppBarWrapper}>\n            <AppBar color=\"default\" position=\"static\">\n              <FormControl>\n                <FormGroup row>\n                  <Typography className={classes.Title} color=\"inherit\" variant=\"h5\">\n                    Sort JSON\n                  </Typography>\n                  <FormControlLabel\n                    className={classes.DarkModeControl}\n                    control={\n                      <Switch\n                        color=\"primary\"\n                        checked={this.state.inDarkMode}\n                        onChange={() => {\n                          this.setState(\n                            {\n                              inDarkMode: !this.state.inDarkMode,\n                            },\n                            () => {\n                              if (this.state.inDarkMode) {\n                                context.action.switchTheme('dark');\n                              } else {\n                                context.action.switchTheme('light');\n                              }\n                            }\n                          );\n                        }}\n                        value=\"inDarkMode\"\n                      />\n                    }\n                    label=\"Dark Mode\"\n                  />\n                  <IconButton color=\"inherit\" href=\"https://github.com/ffflorian/sortjson.com\">\n                    <GithubCircle />\n                  </IconButton>\n                </FormGroup>\n              </FormControl>\n            </AppBar>\n          </div>\n        )}\n      </AppContext.Consumer>\n    );\n  }\n}\n\nexport default withStyles(styles)(Header);\n","import {Theme, Typography, WithStyles, createStyles, withStyles} from '@material-ui/core';\nimport React from 'react';\n\nconst version = process.env.REACT_APP_VERSION || '';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    Imprint: {\n      marginTop: '10px',\n      paddingLeft: '20px',\n    },\n  });\n\ninterface Props extends WithStyles<typeof styles> {}\n\ninterface State {}\n\nclass Footer extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    const {classes} = this.props;\n\n    return (\n      <Typography align=\"left\" className={classes.Imprint} gutterBottom={true}>\n        {`Version ${version}`}\n      </Typography>\n    );\n  }\n}\n\nexport default withStyles(styles)(Footer);\n","import {\n  Button,\n  Grid,\n  Paper,\n  TextField,\n  Theme,\n  Typography,\n  WithStyles,\n  createStyles,\n  withStyles,\n} from '@material-ui/core';\nimport React from 'react';\n\nimport jsonAbc from 'jsonabc';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    Button: {\n      margin: theme.spacing.unit,\n    },\n    Pane: {\n      margin: '20px',\n      padding: theme.spacing.unit * 2,\n    },\n  });\n\ninterface Props extends WithStyles<typeof styles> {}\n\ninterface State {\n  input: string;\n  inputInfo: string;\n  output: string;\n  outputInfo: string;\n}\n\nclass Content extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      input: JSON.stringify({name: 'Sophie', age: 50}, null, 2),\n      inputInfo: 'Please paste your unformatted JSON here.',\n      output: '',\n      outputInfo: '',\n    };\n  }\n\n  formatJSON = () => {\n    try {\n      const object = JSON.parse(this.state.input);\n      const sorted = jsonAbc.sortObj(object, true);\n      this.setState({\n        output: JSON.stringify(sorted, null, 2),\n        outputInfo: 'Formatted and sorted JSON result.',\n      });\n    } catch (error) {\n      this.setState({\n        output: '',\n        outputInfo: 'Input is not valid JSON.',\n      });\n    }\n  };\n\n  handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({input: event.currentTarget.value}, this.formatJSON);\n  };\n\n  get hasClipboardSupport() {\n    const hasClipboardAPI = typeof (navigator as any).clipboard !== 'undefined';\n    const isNotFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') === -1;\n    return hasClipboardAPI && isNotFirefox;\n  }\n\n  copyToClipboard = async (event: React.MouseEvent<HTMLInputElement>) => {\n    const nav = navigator as NavigatorPermissions.NavigatorPermissions;\n    if (nav.permissions) {\n      const result = await nav.permissions.query({name: 'clipboard-write'});\n      if (result.state == 'granted' || result.state == 'prompt') {\n        (navigator as any).clipboard.writeText(this.state.output);\n        this.setState({\n          outputInfo: 'Copied output into clipboard.',\n        });\n      }\n    }\n  };\n\n  pasteFromClipboard = async (event: React.MouseEvent<HTMLInputElement>) => {\n    const nav = navigator as NavigatorPermissions.NavigatorPermissions;\n    if (nav.permissions) {\n      const result = await nav.permissions.query({name: 'clipboard-read'});\n      if (result.state == 'granted' || result.state == 'prompt') {\n        const pasteText = await (navigator as any).clipboard.readText();\n        this.setState(\n          {\n            input: pasteText,\n            inputInfo: 'Pasted clipboard content into input.',\n          },\n          this.formatJSON\n        );\n      }\n    }\n  };\n\n  componentDidMount() {\n    this.formatJSON();\n  }\n\n  render() {\n    const {classes} = this.props;\n\n    return (\n      <Grid container>\n        <Grid item xs={12} sm={6}>\n          <Paper className={classes.Pane}>\n            <Typography variant=\"h5\" component=\"h3\">\n              Input\n            </Typography>\n            <TextField\n              fullWidth\n              helperText={this.state.inputInfo}\n              id=\"jsonInput\"\n              multiline={true}\n              onChange={this.handleInput}\n              placeholder={this.state.input}\n              rows={4}\n              rowsMax={Infinity}\n              style={{margin: 8}}\n              variant=\"filled\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n            {this.hasClipboardSupport && (\n              <Button className={classes.Button} color=\"inherit\" onClick={this.pasteFromClipboard} variant=\"contained\">\n                Paste\n              </Button>\n            )}\n          </Paper>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Paper className={classes.Pane}>\n            <Typography variant=\"h5\" component=\"h3\">\n              Output\n            </Typography>\n            <TextField\n              disabled\n              fullWidth\n              helperText={this.state.outputInfo}\n              id=\"jsonOutput\"\n              multiline={true}\n              rows={4}\n              rowsMax={Infinity}\n              style={{margin: 8}}\n              value={this.state.output}\n              variant=\"filled\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n            {this.hasClipboardSupport && (\n              <Button className={classes.Button} color=\"inherit\" onClick={this.copyToClipboard} variant=\"contained\">\n                Copy\n              </Button>\n            )}\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(Content);\n","import React from 'react';\nimport {AppProvider} from './AppProvider';\nimport AppTheme from './AppTheme';\nimport {Content, Footer, Header} from './components/layout/';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <AppProvider>\n        <AppTheme>\n          <Header />\n          <Content />\n          <Footer />\n        </AppTheme>\n      </AppProvider>\n    );\n  }\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as {env: {[key: string]: string}}).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}