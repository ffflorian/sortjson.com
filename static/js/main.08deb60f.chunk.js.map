{"version":3,"sources":["ThemeProvider.tsx","AppTheme.tsx","components/layout/Header.tsx","components/layout/Footer.tsx","components/layout/Content.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["hasLocalStorage","localStorage","ThemeContext","React","createContext","switchTheme","theme","ThemeProvider","_ref","children","_useState","useState","getItem","_useState2","Object","slicedToArray","setTheme","react_default","a","createElement","Provider","value","name","newTheme","setItem","AppTheme","useContext","core_styles","createMuiTheme","palette","type","typography","useNextVariants","index_es","withStyles","createStyles","AppBarWrapper","flexGrow","DarkModeControl","userSelect","Title","lineHeight","paddingLeft","classes","_useContext","inDarkMode","className","color","position","row","variant","control","checked","onChange","label","href","mdi_material_ui_index_es","Footer","props","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","align","Imprint","gutterBottom","concat","process","Component","marginTop","Content","_this","formatJSON","object","json5","parse","state","input","sorted","jsonAbc","sortObj","setState","output","JSON","stringify","outputInfo","error","handleInput","event","currentTarget","copyToClipboard","asyncToGenerator","regenerator_default","mark","_callee","nav","result","wrap","_context","prev","next","navigator","permissions","query","sent","clipboard","writeText","stop","_x","apply","arguments","pasteFromClipboard","_ref2","_callee2","pasteText","_context2","readText","inputInfo","_x2","age","container","item","xs","sm","Pane","component","fullWidth","helperText","id","multiline","placeholder","rows","rowsMax","Infinity","style","margin","InputLabelProps","shrink","hasClipboardSupport","Button","onClick","disabled","hasClipboardAPI","isNotFirefox","userAgent","toLowerCase","indexOf","spacing","unit","padding","App","ThemeProvider_ThemeProvider","AppTheme_AppTheme","layout_Header","layout_Content","layout_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08deb60f.chunk.js","sourcesContent":["import {PaletteType} from '@material-ui/core';\nimport React, {useState} from 'react';\n\ninterface Context {\n  switchTheme: () => void;\n  theme: PaletteType;\n}\n\nconst hasLocalStorage = () => typeof localStorage !== 'undefined';\n\nconst loadTheme = (): PaletteType => {\n  const theme = hasLocalStorage() && localStorage.getItem('theme');\n  return theme === 'dark' ? 'dark' : 'light';\n};\n\nconst saveTheme = (name: PaletteType) => {\n  if (hasLocalStorage()) {\n    localStorage.setItem('theme', name);\n  }\n};\n\nconst ThemeContext = React.createContext<Context>({switchTheme: () => {}, theme: 'light'});\n\nconst ThemeProvider = ({children}: React.Props<Context>) => {\n  const [theme, setTheme] = useState(loadTheme());\n\n  const switchTheme = () => {\n    const newTheme = theme === 'dark' ? 'light' : 'dark';\n    setTheme(newTheme);\n    saveTheme(newTheme);\n  };\n\n  return <ThemeContext.Provider value={{switchTheme, theme}}>{children}</ThemeContext.Provider>;\n};\n\nexport {ThemeContext, ThemeProvider};\n","import {CssBaseline, MuiThemeProvider, PaletteType, createMuiTheme} from '@material-ui/core';\nimport {MuiThemeProviderProps} from '@material-ui/core/styles/MuiThemeProvider';\nimport React, {useContext} from 'react';\nimport {ThemeContext} from './ThemeProvider';\n\nexport const AppTheme = ({children}: React.Props<MuiThemeProviderProps>) => {\n  const {theme} = useContext(ThemeContext);\n  return (\n    <MuiThemeProvider\n      theme={createMuiTheme({\n        palette: {\n          type: theme,\n        },\n        typography: {\n          useNextVariants: true,\n        },\n      })}\n    >\n      <CssBaseline />\n      {children}\n    </MuiThemeProvider>\n  );\n};\n\nexport default AppTheme;\n","import {\n  AppBar,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  IconButton,\n  Switch,\n  Typography,\n  WithStyles,\n  createStyles,\n  withStyles,\n} from '@material-ui/core';\nimport {GithubCircle} from 'mdi-material-ui';\nimport React, {useContext} from 'react';\nimport {ThemeContext} from '../../ThemeProvider';\n\nconst styles = () =>\n  createStyles({\n    AppBarWrapper: {\n      flexGrow: 1,\n    },\n    DarkModeControl: {\n      userSelect: 'none',\n    },\n    Title: {\n      flexGrow: 1,\n      lineHeight: '48px',\n      paddingLeft: '20px',\n    },\n  });\n\ninterface Props extends WithStyles<typeof styles> {}\n\nconst Header = ({classes}: Props) => {\n  const {theme, switchTheme} = useContext(ThemeContext);\n  const inDarkMode = theme === 'dark';\n\n  return (\n    <div className={classes.AppBarWrapper}>\n      <AppBar color=\"default\" position=\"static\">\n        <FormControl>\n          <FormGroup row>\n            <Typography className={classes.Title} color=\"inherit\" variant=\"h5\">\n              Sort JSON\n            </Typography>\n            <FormControlLabel\n              className={classes.DarkModeControl}\n              control={<Switch color=\"primary\" checked={inDarkMode} onChange={switchTheme} />}\n              label=\"Dark Mode\"\n            />\n            <IconButton color=\"inherit\" href=\"https://github.com/ffflorian/sortjson.com\">\n              <GithubCircle />\n            </IconButton>\n          </FormGroup>\n        </FormControl>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(Header);\n","import {Theme, Typography, WithStyles, createStyles, withStyles} from '@material-ui/core';\nimport React from 'react';\n\nconst version = process.env.REACT_APP_VERSION || '';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    Imprint: {\n      marginTop: '10px',\n      paddingLeft: '20px',\n    },\n  });\n\ninterface Props extends WithStyles<typeof styles> {}\n\ninterface State {}\n\nclass Footer extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    const {classes} = this.props;\n\n    return (\n      <Typography align=\"left\" className={classes.Imprint} gutterBottom={true}>\n        {`Version ${version}`}\n      </Typography>\n    );\n  }\n}\n\nexport default withStyles(styles)(Footer);\n","import {\n  Button,\n  Grid,\n  Paper,\n  TextField,\n  Theme,\n  Typography,\n  WithStyles,\n  createStyles,\n  withStyles,\n} from '@material-ui/core';\nimport json5 from 'json5';\nimport React from 'react';\n\nimport jsonAbc from 'jsonabc';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    Button: {\n      margin: theme.spacing.unit,\n    },\n    Pane: {\n      margin: '20px',\n      padding: theme.spacing.unit * 2,\n    },\n  });\n\ninterface Props extends WithStyles<typeof styles> {}\n\ninterface State {\n  input: string;\n  inputInfo: string;\n  output: string;\n  outputInfo: string;\n}\n\nclass Content extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      input: JSON.stringify({name: 'Sophie', age: 50}, null, 2),\n      inputInfo: 'Please paste your unformatted JSON here.',\n      output: '',\n      outputInfo: '',\n    };\n  }\n\n  formatJSON = () => {\n    try {\n      const object = json5.parse(this.state.input);\n      const sorted = jsonAbc.sortObj(object, true);\n      this.setState({\n        output: JSON.stringify(sorted, null, 2),\n        outputInfo: 'Formatted and sorted JSON result.',\n      });\n    } catch (error) {\n      this.setState({\n        output: '',\n        outputInfo: 'Input is not valid JSON.',\n      });\n    }\n  };\n\n  handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({input: event.currentTarget.value}, this.formatJSON);\n  };\n\n  get hasClipboardSupport() {\n    const hasClipboardAPI = typeof (navigator as any).clipboard !== 'undefined';\n    const isNotFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') === -1;\n    return hasClipboardAPI && isNotFirefox;\n  }\n\n  copyToClipboard = async (event: React.MouseEvent<HTMLInputElement>) => {\n    const nav = navigator as NavigatorPermissions.NavigatorPermissions;\n    if (nav.permissions) {\n      const result = await nav.permissions.query({name: 'clipboard-write'});\n      if (result.state == 'granted' || result.state == 'prompt') {\n        (navigator as any).clipboard.writeText(this.state.output);\n        this.setState({\n          outputInfo: 'Copied output into clipboard.',\n        });\n      }\n    }\n  };\n\n  pasteFromClipboard = async (event: React.MouseEvent<HTMLInputElement>) => {\n    const nav = navigator as NavigatorPermissions.NavigatorPermissions;\n    if (nav.permissions) {\n      const result = await nav.permissions.query({name: 'clipboard-read'});\n      if (result.state == 'granted' || result.state == 'prompt') {\n        const pasteText = await (navigator as any).clipboard.readText();\n        this.setState(\n          {\n            input: pasteText,\n            inputInfo: 'Pasted clipboard content into input.',\n          },\n          this.formatJSON\n        );\n      }\n    }\n  };\n\n  componentDidMount() {\n    this.formatJSON();\n  }\n\n  render() {\n    const {classes} = this.props;\n\n    return (\n      <Grid container>\n        <Grid item xs={12} sm={6}>\n          <Paper className={classes.Pane}>\n            <Typography variant=\"h5\" component=\"h3\">\n              Input\n            </Typography>\n            <TextField\n              fullWidth\n              helperText={this.state.inputInfo}\n              id=\"jsonInput\"\n              multiline={true}\n              onChange={this.handleInput}\n              placeholder={this.state.input}\n              rows={4}\n              rowsMax={Infinity}\n              style={{margin: 8}}\n              variant=\"filled\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n            {this.hasClipboardSupport && (\n              <Button className={classes.Button} color=\"inherit\" onClick={this.pasteFromClipboard} variant=\"contained\">\n                Paste\n              </Button>\n            )}\n          </Paper>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <Paper className={classes.Pane}>\n            <Typography variant=\"h5\" component=\"h3\">\n              Output\n            </Typography>\n            <TextField\n              disabled\n              fullWidth\n              helperText={this.state.outputInfo}\n              id=\"jsonOutput\"\n              multiline={true}\n              rows={4}\n              rowsMax={Infinity}\n              style={{margin: 8}}\n              value={this.state.output}\n              variant=\"filled\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n            {this.hasClipboardSupport && (\n              <Button className={classes.Button} color=\"inherit\" onClick={this.copyToClipboard} variant=\"contained\">\n                Copy\n              </Button>\n            )}\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(Content);\n","import React from 'react';\nimport {AppTheme} from './AppTheme';\nimport {Content, Footer, Header} from './components/layout/';\nimport {ThemeProvider} from './ThemeProvider';\n\nconst App = () => (\n  <ThemeProvider>\n    <AppTheme>\n      <Header />\n      <Content />\n      <Footer />\n    </AppTheme>\n  </ThemeProvider>\n);\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as {env: {[key: string]: string}}).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}